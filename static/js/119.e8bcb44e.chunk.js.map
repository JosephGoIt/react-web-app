{"version":3,"file":"static/js/119.e8bcb44e.chunk.js","mappings":"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","sources":["redux/tasks/selectors.js","webpack://react-web-app/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-web-app/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-web-app/./src/components/ContactList/ContactListItem.module.css?16c0","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = (state) => state.contacts?.items || [];\nexport const selectFilter = (state) => state.filter;\nexport const selectIsLoading = (state) => state.contacts?.isLoading;\nexport const selectError = (state) => state.contacts?.error;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formField\":\"ContactForm_formField__O5fo+\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formButton\":\"ContactForm_formButton__TN6Jq\"};","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/tasks/contactSlice';\nimport { selectContacts } from '../../redux/tasks/selectors';\nimport css from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [email, setEmail] = useState('');\n  const [favorite, setFavorite] = useState('');\n\n  const handleNameChange = (e) => {\n    setName(e.target.value);\n  };\n\n  const handlePhoneChange = (e) => {\n    setPhone(e.target.value);\n  };\n\n  const handleEmailChange = (e) => {\n    setEmail(e.target.value);\n  };\n\n  const handleFavoriteChange = (e) => {\n    setFavorite(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (name.trim() === '' || phone.trim() === '' || email.trim() === '') {\n      return;\n    }\n\n    const nameExists = contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase());\n    if (nameExists) {\n      alert(`${name} already exists in contacts!`);\n      return;\n    }\n\n    dispatch(addContact({ name, phone, email, favorite }));\n    setName('');\n    setPhone('');\n    setEmail('');\n    setFavorite('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.formField}>\n        <p className={css.formLabel}>Name</p>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Za-яА-Я]+(([' \\-][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*$\"\n          value={name}\n          onChange={handleNameChange}\n          required\n          placeholder=\"Enter name\"\n        />\n      </label>\n\n      <label className={css.formField}>\n        <p className={css.formLabel}>Email</p>\n        <input\n          type=\"email\"\n          name=\"email\"\n          pattern=\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\n          value={email}\n          onChange={handleEmailChange}\n          required\n          placeholder=\"Enter email\"\n        />\n      </label>\n\n      <label className={css.formField}>\n        <p className={css.formLabel}>Number</p>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          value={phone}\n          onChange={handlePhoneChange}\n          required\n          placeholder=\"Enter number\"\n        />\n      </label>\n\n      <label className={css.formField}>\n        <p className={css.formLabel}>Favorite</p>\n        <input\n          type=\"bolean\"\n          name=\"favorite\"\n          pattern=\"^[a-zA-Za-яА-Я]+(([' \\-][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*$\"\n          value={favorite}\n          onChange={handleFavoriteChange}\n          required\n          placeholder=\"Enter true or false\"\n        />\n      </label>\n\n      <button className={css.formButton} type=\"submit\">\n        Add Contact\n      </button>\n    </form>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Filter_container__L5eml\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport css from './Filter.module.css';\nimport { setFilter } from '../../redux/tasks/filterSlice';\nimport { selectFilter } from '../../redux/tasks/selectors';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(selectFilter);\n  \n    const onFilterChange = (e) => {\n      dispatch(setFilter(e.target.value));\n    };\n  \n    return (\n      <div className={css.container}>\n        <p>Find Contacts by Name</p>\n        <input\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Search by name\"\n          value={filter}\n          onChange={onFilterChange}\n        />\n      </div>\n    );\n  };","// extracted by mini-css-extract-plugin\nexport default {\"contactListItem\":\"ContactListItem_contactListItem__7AdNI\",\"contactAlign\":\"ContactListItem_contactAlign__0Bn72\",\"btncon\":\"ContactListItem_btncon__4fb02\",\"contcon\":\"ContactListItem_contcon__o-Hys\",\"btnDelete\":\"ContactListItem_btnDelete__jyC1S\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './ContactListItem.module.css';\n\nconst ContactListItem = ({ contact, deleteContact }) => {\n  console.log('Contact in ContactListItem:', contact); // Log the contact prop\n  return (\n    <li className={css.contactListItem}>\n      <div className={css.contactAlign}>\n        <span>{contact.name}</span>\n        <span>{contact.email}</span>\n        <span>{contact.phone}</span>\n        <span>{contact.favorite?.toString()}</span>\n      </div>\n      <button className={css.deleteButton} onClick={deleteContact}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n    favorite: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]).isRequired,\n  }).isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/tasks/contactSlice';\nimport { selectContacts, selectFilter } from '../../redux/tasks/selectors';\nimport ContactListItem from './ContactListItem';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <ul>\n      {filteredContacts.map(contact => {\n        console.log('Contact:', contact); // Log each contact object\n        return (\n          <ContactListItem\n            key={contact.id}\n            contact={contact}\n            deleteContact={() => dispatch(deleteContact(contact.id))}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n","import { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Helmet } from 'react-helmet';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList'\nimport { store } from '../redux/store';\nimport { fetchContacts } from '../redux/tasks/contactSlice';\n\n// import { selectIsLoading } from '../redux/tasks/selectors';\n\nexport default function Tasks() {\n  // const dispatch = useDispatch();\n  // const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    store.dispatch(fetchContacts());\n  }, []);\n\n  return (\n    <>\n      {/* <Helmet>\n        <title>Your tasks</title>\n      </Helmet> */}\n      <ContactForm />\n      {/* {<div>{isLoading && 'Request in progress...'}</div>} */}\n      <Filter />\n      <ContactList />\n    </>\n  );\n}"],"names":["selectContacts","state","_state$contacts","contacts","items","selectFilter","filter","ContactForm","dispatch","useDispatch","useSelector","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","phone","setPhone","_useState5","_useState6","email","setEmail","_useState7","_useState8","favorite","setFavorite","_jsxs","className","css","onSubmit","e","preventDefault","trim","find","contact","toLowerCase","alert","concat","addContact","children","_jsx","type","pattern","value","onChange","target","required","placeholder","Filter","setFilter","_ref","_contact$favorite","deleteContact","console","log","toString","onClick","ContactList","filteredContacts","includes","map","ContactListItem","id","Tasks","useEffect","store","fetchContacts","_Fragment"],"sourceRoot":""}